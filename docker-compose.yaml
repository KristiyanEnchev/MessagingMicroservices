version: '3.8'
services:

  mssql:
    image: mcr.microsoft.com/mssql/server:latest
    container_name: identity-mssql
    environment:
      SA_PASSWORD: "Aa!123456"
      ACCEPT_EULA: "Y"
    restart: always
    ports:
      - "1433:1433"
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'Aa!123456' -Q 'SELECT 1' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - sqldata:${MSSQL_DATA_DIR:-/var/opt/mssql}
    networks:
      - identity-api-network
  
  sqlpad:
    image: sqlpad/sqlpad:latest
    container_name: sqlpad
    ports:
        - "3001:3000"
    environment:
        SQLPAD_ADMIN: "admin"
        SQLPAD_ADMIN_PASSWORD: "admin123"
        SQLPAD_APP_LOG_LEVEL: "info"
    restart: always
    networks:
      - identity-api-network

  redis:
    image: redis:latest
    container_name: master
    command: bash -c "redis-server --appendonly yes --requirepass password"
    ports:
        - '6379:6379'
    volumes:
        - ./Redis/data:/data
    networks:
      - identity-api-network

  redis-slave:
    image: redis:latest
    container_name: slave
    ports:
      - '6380:6379'
    command: redis-server /etc/redis.conf --replicaof master 6379
    depends_on:
      - redis
    volumes:
      - ./Redis/redis.conf:/etc/redis.conf
    networks:
      - identity-api-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=slave
      - REDIS_HOST=master
      - REDIS_PASSWORD=password
      - HTTP_USER=masterauth
      - HTTP_PASSWORD=password
    ports:
      - 8081:8081
    depends_on:
      - redis
    networks:
      - identity-api-network

  demo-message-broker:
    build:
      context: ./RabbitMQ
      dockerfile: Dockerfile
    container_name: demo-broker
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - identity-api-network

  authenticationservice:
    container_name: authentication.api
    build:
      context: ./IdentityApi
      dockerfile: API/Host/Dockerfile
    environment:
      - ConnectionStrings__DefaultConnection=Server=identity-mssql,1433;Database=NewAuthenticationDB;User Id=SA;Password=Aa!123456;Encrypt=False;
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://0.0.0.0:80
    ports:
      - '8080:8080'
    restart: always
    networks:
      - identity-api-network
    volumes:
      - datakeys:/root/.aspnet/DataProtection-Keys
    command:
      - sh
      - -c
      - |
        echo "Waiting for MSSQL..." ;
        until /opt/mssql-tools/bin/sqlcmd -S identity-mssql -U sa -P "Aa!123456" -Q "SELECT 1" > /dev/null 2>&1;
        do
          echo "SQL not ready yet...";
          sleep 5;
        done;
        echo "SQL ready. Starting API...";
        dotnet API.Host.dll

  waitstarter:
    image: alpine
    command: ["sh", "-c", "echo 'Sleeping 20s...'; sleep 20"]
    networks:
    - identity-api-network

  emailservice:
    container_name: email.api
    build:
      context: ./EmailService
      dockerfile: /API/Host/Dockerfile
    environment:
      - ConnectionStrings__DefaultConnection=Server=host.docker.internal,1433;Database=EmailService;User Id=SA;Password=Aa!123456;Encrypt=True;TrustServerCertificate=True;
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ASPNETCORE_ENVIRONMENT=DEV
    ports:
      - "5070:80"
    restart: on-failure
    depends_on:
      waitstarter:
        condition: service_completed_successfully
    networks:
      - identity-api-network

  smsservice:
    container_name: sms.api
    build:
      context: ./SMSService
      dockerfile: /API/Host/Dockerfile
    environment:
      - ConnectionStrings__DefaultConnection=Server=host.docker.internal,1433;Database=SMSService;User Id=SA;Password=Aa!123456;Encrypt=False;
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ASPNETCORE_ENVIRONMENT=DEV
    ports:
      - "5073:80"
    depends_on:
      waitstarter:
        condition: service_completed_successfully
    networks:
      - identity-api-network

  otpservice:
    container_name: otp.api
    build:
      context: ./OTPService
      dockerfile: /API/Host/Dockerfile
    environment:
      - ConnectionStrings__DefaultConnection=Server=host.docker.internal,1433;Database=OTPService;User Id=SA;Password=Aa!123456;Encrypt=False;
      - ASPNETCORE_URLS=http://0.0.0.0:80
    ports:
      - "5072:80"
    depends_on:
      waitstarter:
        condition: service_completed_successfully
    networks:
      - identity-api-network

  notificationservice:
    container_name: notification.api
    build:
      context: ./NotificationService
      dockerfile: /API/Host/Dockerfile
    environment:
      - ConnectionStrings__DefaultConnection=Server=host.docker.internal,1433;Database=NotificationService;User Id=SA;Password=Aa!123456;Encrypt=False;
      - ASPNETCORE_URLS=http://0.0.0.0:80
    ports:
      - "5071:80"
    restart: on-failure
    depends_on:
      waitstarter:
        condition: service_completed_successfully
      demo-message-broker:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - identity-api-network

  apigateway:
    container_name: apigateway
    build:
      context: ./ApiGateways
      dockerfile: ApiGateways/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://0.0.0.0:80
    ports:
      - "5008:80"
    depends_on:
      - redis
      - demo-message-broker
      - emailservice
      - smsservice
      - otpservice
      - notificationservice
    networks:
      - identity-api-network

  client:
    build:
        context: ./IdentityClient
        dockerfile: Dockerfile
        args:
        - VITE_GATEWAY_API_URL=http://localhost:5008
        - VITE_IDENTITY_API_URL=http://localhost:8080
    container_name: react-client
    ports:
        - '3000:80'
    depends_on:
        authenticationservice:
          condition: service_started
    environment:
        - NODE_ENV=PROD
    networks:
        - identity-api-network

volumes:
  datakeys:
  sqldata:

networks:
  identity-api-network:
