version: '3.8'
services:
  mssql:
    image: mcr.microsoft.com/mssql/server:latest
    container_name: identity-mssql
    environment:
      SA_PASSWORD: "Aa!123456"
      ACCEPT_EULA: "Y"
    restart: always
    ports:
      - "1433:1433"
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'Aa!123456' -Q 'SELECT 1' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - sqldata:${MSSQL_DATA_DIR:-/var/opt/mssql}
    networks:
      - identity-api-network
  
  sqlpad:
    image: sqlpad/sqlpad:latest
    container_name: sqlpad
    ports:
        - "3000:3000"
    environment:
        SQLPAD_ADMIN: "admin"
        SQLPAD_ADMIN_PASSWORD: "admin123"
        SQLPAD_APP_LOG_LEVEL: "info"
    restart: always
    networks:
    - identity-api-network

  authenticationservice:
    container_name: authentication.api
    build:
      context: ./IdentityApi
      dockerfile: API/Host/Dockerfile
    environment:
      - ConnectionStrings__DefaultConnection=Server=identity-mssql,1433;Database=NewAuthenticationDB;User Id=SA;Password=Aa!123456;Encrypt=False;
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://0.0.0.0:80
    ports:
      - '8080:8080'
    restart: always
    # depends_on:
    #   mssql:
    #     condition: service_healthy
    networks:
      - identity-api-network
    volumes:
      - datakeys:/root/.aspnet/DataProtection-Keys
    command:
      - sh
      - -c
      - |
        echo "Waiting for MSSQL..." ;
        until /opt/mssql-tools/bin/sqlcmd -S identity-mssql -U sa -P "Aa!123456" -Q "SELECT 1" > /dev/null 2>&1;
        do
          echo "SQL not ready yet...";
          sleep 5;
        done;
        echo "SQL ready. Starting API...";
        dotnet API.Host.dll

volumes:
  datakeys:
  sqldata:

networks:
  identity-api-network:
